name: Deploy API to ECS

on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # OIDC
  contents: read

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "100024683059"
  ECR_REPO: apdisc2-api
  ECS_CLUSTER: apdisc2
  ECS_SERVICE: apdisc2-api-svc
  TASK_FAMILY: apdisc
  CONTAINER_NAME: api

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image meta
        id: meta
        run: |
          SHA="${GITHUB_SHA::12}"
          REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
          echo "tag=$SHA" >> "$GITHUB_OUTPUT"
          echo "repo_uri=$REPO_URI" >> "$GITHUB_OUTPUT"

      - name: Build & Push (linux/amd64)
        run: |
          docker buildx create --use >/dev/null 2>&1 || true
          docker buildx build \
            --platform linux/amd64 \
            -f backend/api/Dockerfile \
            -t "${{ steps.meta.outputs.repo_uri }}:${{ steps.meta.outputs.tag }}" \
            --push \
            ./backend/api

      - name: Fetch current task definition
        run: |
          aws ecs describe-task-definition --task-definition "${TASK_FAMILY}" > td.json

      - name: Prepare new task definition JSON (update image, strip nulls)
        id: td
        run: |
          IMAGE="${{ steps.meta.outputs.repo_uri }}:${{ steps.meta.outputs.tag }}"

          # Update the container image by name and drop AWS-managed + null fields
          jq --arg IMG "$IMAGE" --arg NAME "$CONTAINER_NAME" '
            .taskDefinition
            # update the container image for matching name
            | .containerDefinitions = (.containerDefinitions
                | map(if .name == $NAME then (.image = $IMG) else . end))
            # drop AWS-managed fields
            | del(
                .taskDefinitionArn,
                .revision,
                .status,
                .requiresAttributes,
                .compatibilities,
                .registeredAt,
                .registeredBy
              )
            # remove keys with null values (ECS API rejects nulls like taskRoleArn: null)
            | with_entries(select(.value != null))
          ' td.json > new-td.json

          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Register new task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://new-td.json

      - name: Force new deployment
        run: |
          aws ecs update-service \
            --cluster "${ECS_CLUSTER}" \
            --service "${ECS_SERVICE}" \
            --force-new-deployment

      # -------- OPTIONAL: run Prisma migrations after deploy --------
      # Enable this block if you want to auto-apply migrations.
      # Add repo secrets:
      #   ECS_SUBNETS = subnet-xxxx,subnet-yyyy
      #   ECS_SECURITY_GROUP = sg-xxxx
      #
      # - name: Run Prisma migrate (one-off task)
      #   if: always()
      #   run: |
      #     if [ -z "${{ secrets.ECS_SUBNETS }}" ] || [ -z "${{ secrets.ECS_SECURITY_GROUP }}" ]; then
      #       echo "Skip migrate: ECS_SUBNETS or ECS_SECURITY_GROUP not set"; exit 0; fi
      #     TD_ARN=$(aws ecs describe-task-definition --task-definition "${TASK_FAMILY}" --query 'taskDefinition.taskDefinitionArn' --output text)
      #     aws ecs run-task \
      #       --cluster "${ECS_CLUSTER}" \
      #       --launch-type FARGATE \
      #       --task-definition "$TD_ARN" \
      #       --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.ECS_SUBNETS }}],securityGroups=[${{ secrets.ECS_SECURITY_GROUP }}],assignPublicIp=ENABLED}" \
      #       --overrides '{
      #         "containerOverrides": [{
      #           "name": "'"${CONTAINER_NAME}"'",
      #           "command": ["npx","prisma","migrate","deploy"]
      #         }]
      #       }'
